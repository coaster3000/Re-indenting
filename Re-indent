-- Define these variables at the top for easy modification

local tabWidth = 2
local increment = {"if", "do", "repeat", "function"}
local decrement = {"end", "until"}
local special = {"elseif", "else"}


-- Done with the GUI, however readBounds doesnt work properly yet.. (cursor keeps blinking at the wrong spot)

local readBounds = function( nMin, nMax )
	local realString = ""
	local showString = ""
	local pointer = pointer or ""
	local x, y = term.getCursorPos()
	term.setCursorPos( x - 1 < 1 and x or x - 1, y)

	term.setCursorBlink(true)
	while true do
		local event = {os.pullEvent()}
		local x, y = term.getCursorPos()

		if event[1] == "char" then
			showString = showString .. event[2]
			realString = realString .. event[2]
		elseif event[1] == "key" then
			if event[2] == keys.enter then
				print()
				return realString
			elseif event[2] == keys.backspace then
				showString = string.sub(showString, 1, showString:len() - 1)
				realString = string.sub(realString, 1, realString:len() - 1)
			end
		end
		if x == nMax + 1 then
		showString = string.sub(showString, -(nMax - nMin - 1))
		end

		term.setCursorPos( nMin, y)
		write( string.rep(" ", nMax - nMin + 1))

		term.setCursorPos( nMin, y)
		write( showString )
	end
end

local function cPrint(text, ny) -- function made by you :P
	if type(text) == "table" then for _, v in pairs(text) do centerPrint(v) end
	else
		local x, y = term.getCursorPos()
		local w, h = term.getSize()
		term.setCursorPos(w/2 - text:len()/2 + (#text % 2 == 0 and 1 or 0), ny or y)
		print(text)
	end
end

local width, height = term.getSize()

term.setBackgroundColour( colours.cyan )
term.clear()
term.setBackgroundColour( colours.blue )

local xMin = math.floor( width / 5 )
local xMax = math.floor( width / 5 ) * 4

local nX, nY, ntX, ntY

for i = 0, 4 do
	term.setCursorPos( xMin, math.floor( height / 3) + i + 2)
	if i == 2 then -- The lazy way
		nX, nY = term.getCursorPos()
	elseif i == 1 then
		ntX, ntY = term.getCursorPos()
	end
	write( string.rep(" ", xMax - xMin))
end

term.setTextColour( colours.white )
term.setCursorPos( xMin + 3, nY)
write(">")

term.setBackgroundColour( colours.black )
write( string.rep(" ", (xMax - 3) - (xMin + 5) ))
term.setCursorPos( xMin + 5, nY)
local sFile = readBounds( xMin + 5, xMax - 3)

if not fs.exists( sFile ) then
	term.setTextColour( colours.red )
	term.setBackgroundColour( colours.blue )
	cPrint("File does not exist!", ntY)
	error()
elseif fs.isDir(sFile) then
	term.setTextColour( colours.red )
	term.setBackgroundColour( colours.blue )
	cPrint("File is a directory!", ntY)
	error()
elseif fs.isReadOnly(sFile) then
	term.setTextColour( colours.red )
	term.setBackgroundColour( colours.blue )
	cPrint("File is read only!", ntY)
	error()
end

local function isInStr(code, line, case)
	-- Check if a certain keyword is in a string (multiline or singular)
	return false
end

local function isInComment(code, line, case)
	-- Check if a keyword is in a comment (block or line)
	return false
end


local f = io.open(sFile, "r")
local l = f:read("*l")
local indent = 0

while l do
	-- Remove current indentation
	local new = l:gsub("^%s*(.-)", "%1")

	-- Add indentation
	new = string.rep(" ", indent * tabWidth) .. new

	-- Change indentation
	-- ...
end




-- some brainstorming
-- [[  PSUEDO CODE ]] --
local indentLevel = {} -- Same as the current line
-- This is the table where we store the indent level for every line.


-- assuming we take comments at level zero
local comments = {}
local startComment = false
for i = 1, #lines do
	if string.find("--[[") then
		startComment = true
		comments[#comments + 1] = {}
		comments[#comments][1] = i
	elseif string.find("]]") and startComment then -- "]]" -> I think thats is not going to work
		startComment = false
		comments[#comments][2] = i
	elseif string.find("--") then
		comments[#comments + 1] = {}
		comments[#comments][1], comments[#comments][2] = i, i
	end
end

-- After making that, they could also do: if something then -[[ blabla ]] print("d")
-- It is something to think about, maybe indent for it + the indent space, and when the comment is over indent back to the original
-- indent level, or where it was 
-- At least we got the comments mapped out

-- For the basic indenting, we could use a pairs loop in a pairs loop
local 

for index, line in pairs( linesTable ) do
	for _, statement in pairs(

--[[ END PSUEDO CODE ]]--
