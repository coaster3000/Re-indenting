
--  
--  Re-Indent
--  By Engineer and GravityScore
--  


--  -------- Variables

local w, h = term.getSize()  

local args = {...}
local tabWidth = 2
local path = nil

local comments = {}
local strings = {}
local button = {}

local increment = {
	"if%s+.+%s+then%s*$",
	"for%s+.+%s+do%s*$",
	"while%s+.+%s+do%s*$",
	"repeat%s*$",
	"function%s+[a-zA-Z_0-9]\(.*\)%s*$"
}

local decrement = {
	"end",
	"until%s+.+"
}

local special = {
	"else%s*$",
	"elseif%s+.+%s+then%s*$"
}


--  -------- GUI

local function centerPrint(text, ny)
	if type(text) == "table" then for _, v in pairs(text) do centerPrint(v) end
	else
		local x, y = term.getCursorPos()
		local w, h = term.getSize()
		term.setCursorPos(w/2 - text:len()/2 + (#text % 2 == 0 and 1 or 0), ny or y)
		print(text)
	end
end

local function setBox(xTop, yTop, xBot, yBot, col, name)
	term.setBackgroundColour(col)
	for i = 0, yBot - yTop do
		for j = 0, xBot - xTop do
			term.setCursorPos(xTop + j, yTop + i)
			term.write(" ")
		end
	end

	button[#button + 1] = {}
	button[#button].xMin = xTop
	button[#button].xMax = xBot
	button[#button].yMin = yTop
	button[#button].yMax = yBot
	button[#button].name = name
end

local function drawColor(path)
	term.setBackgroundColour(colours.grey)
	term.clear()
	term.setTextColour(colours.black)

	setBox(w - 17, 1, w - 1, 3, colours.orange, "set tab")
	term.setCursorPos(w - 16, 2)
	term.write("Tab Width: " .. (tostring(tabWidth):len() ==  1 and "0" or "") .. tabWidth .. " ")

	local symbol = {"^", "|", "v"}
	for i = 1, 3 do
		term.setCursorPos(w - 2, i)
		term.write(symbol[i])
	end

	setBox(2, 1, 17, 3, colours.orange, "re-indent")
	term.setCursorPos(4, 2)
	term.write("Re-Indent!")

	setBox(5, h - 2, 13, h, colors.orange, "exit")
	term.setCursorPos(7, h - 1)
	term.write("Exit")

	setBox(11, math.ceil(h / 2) - 1, w - 11, math.ceil(h / 2) + 1, colours.lightGrey,
		"enter file")
	term.setCursorPos(12, math.ceil(h / 2))
	term.write(">")
	term.setCursorPos(14, math.ceil(h / 2))
	term.setBackgroundColour(colours.black)
	term.write(string.rep(" ", w - 26))
	term.setCursorPos(14, math.ceil(h / 2))
	term.setTextColour(colours.white)
	term.setCursorBlink(true)
	term.write(path)
end

--  -------- Mapping

local function check(func)
	for _, v in pairs(func) do
		local cLineStart = v["lineStart"]
		local cLineEnd = v["lineEnd"]
		local cCharStart = v["charStart"]
		local cCharEnd = v["charEnd"]

		if line >= cLineStart and line <= cLineEnd then
			if line == cLineStart then return cCharStart < charNumb
			elseif line == cLineEnd then return cCharEnd > charNumb
			else return true end
		end
	end
end

local function isIn(line, loc)
	if check(comments) then return true end
	if check(strings) then return true end
	return false
end

local function setComment(ls, le, cs, ce)
	comments[#comments + 1] = {}
	comments[#comments].lineStart = ls
	comments[#comments].lineEnd = le
	comments[#comments].charStart = cs
	comments[#comments].charEnd = ce
end

local function setString(ls, le, cs, ce)
	strings[#strings + 1] = {}
	strings[#strings].lineStart = ls
	strings[#strings].lineEnd = le
	strings[#strings].charStart = cs
	strings[#strings].charEnd = ce
end

local function map(contents)
	local inCom = false
	local inStr = false

	for i = 1, #contents do
		if content[i]:find("%-%-%[%[") and not inStr and not inCom then
			local cStart = content[i]:find("%-%-%[%[")
			setComment(i, nil, cStart, nil)
			inCom = true
		elseif content[i]:find("%-%-%[=%[") and not inStr and not inCom then
			local cStart = content[i]:find("%-%-%[=%[")
			setComment(i, nil, cStart, nil)
			inCom = true
		elseif content[i]:find("%[%[") and not inStr and not inCom then
			local cStart = content[i]:find("%[%[")
			setString(i, nil, cStart, nil)
			inStr = true
		elseif content[i]:find("%[=%[") and not inStr and not inCom then
			local cStart = content[i]:find("%[=%[")
			setString(i, nil, cStart, nil)
			inStr = true
		end

		if content[i]:find("%]%]") and inStr and not inCom then
			local cStart, cEnd = content[i]:find("%]%]")
			strings[#strings].lineEnd = i
			strings[#strings].charEnd = cEnd
			inStr = false
		elseif content[i]:find("%]=%]") and inStr and not inCom then
			local cStart, cEnd = content[i]:find("%]=%]")
			strings[#strings].lineEnd = i
			strings[#strings].charEnd = cEnd
			inStr = false
		end

		if content[i]:find("%]%]") and not inStr and inCom then
			local cStart, cEnd = content[i]:find("%]%]")
			comments[#comments].lineEnd = i
			comments[#comments].charEnd = cEnd
			inCom = false
		elseif content[i]:find("%]=%]") and not inStr and inCom then
			local cStart, cEnd = content[i]:find("%]=%]")
			comments[#comments].lineEnd = i
			comments[#comments].charEnd = cEnd
			inCom = false
		end

		if content[i]:find("%-%-") and not inStr and not inCom then
			local cStart = content[i]:find("%-%-")
			setComment(i, i, cStart, -1)
		elseif content[i]:find("'") and not inStr and not inCom then
			local cStart, cEnd = content[i]:find("'")
			local nextChar = content[i]:sub(cEnd + 1, string.len(content[i]))
			local _, cEnd = nextChar:find("'")
			setString(i, i, cStart, cEnd)
		elseif content[i]:find('"') and not inStr and not inCom then
			local cStart, cEnd = content[i]:find('"')
			local nextChar = content[i]:sub(cEnd + 1, string.len(content[i]))
			local _, cEnd = nextChar:find('"')
			setString(i, i, cStart, cEnd)
		end
	end
end

--  -------- Re-Indenting

local function reindent(contents)
	local new = {}
	local level = 0
	for k, v in pairs(contents) do
		local incrLevel = false
		local foundIncr = false
		for _, incr in pairs(increment) do
			if v:find(incr) and not isIn(k, v:find(incr)) then
				incrLevel = true
			end
			if v:find(incr:sub(1, -2)) and not isIn(k, v:find(incr)) then
				foundIncr = true
			end
		end

		local decrLevel = false
		if not incrLevel then
			for _, decr in pairs(decrement) do
				if v:find(decr) and not isIn(k, v:find(decr)) and not foundIncr then
					level = math.max(0, level - 1)
					decrLevel = true
				end
			end
		end

		if not decrLevel then
			for _, sp in pairs(special) do
				if v:find(sp) and not isIn(k, v:find(sp)) then
					incrLevel = true
					level = math.max(0, level - 1)
				end
			end
		end

		new[k] = string.rep(" ", level * tabWidth) .. v
		if incrLevel then level = level + 1 end
	end

	return new
end

--  -------- Main

local function main(path, v)
	if not fs.exists(path) then
		if v then print("File does not exist!") end
		return "File does not exist!"
	elseif fs.isDir(path) then
		if v then print("File is a directory!") end
		return "File is a directory!"
	elseif fs.isReadOnly(path) then
		if v then print("File is read only!") end
		return "File is read only!"
	end

	if v then print("Re-indenting file...") end

	local content = {}
	local f = fs.open(path, "r")
	for line in f.readLine do
		content[#content + 1] = line:gsub("^%s*(.-)", "%1")
	end
	f.close()

	content = reindent(content)

	fs.delete(path)
	local f = fs.open(path, "a")
	for _, v in pairs(content) do
		f.writeLine(v)
	end
	f.close()

	if v then print("File indented!") end
	return "true"
end

local function gui()
	local showString = ""
	local path = ""
	local err = nil

	if not (term.isColor and term.isColor()) then
		print("Usage:")
		print("reindent <path>")
		return true
	end

	drawColor(showString)

	while not err do
		local e = {os.pullEvent()}
		if e[1] == "mouse_click" then
			for _, coord in pairs(button) do
				if e[3] >= coord.xMin and e[3] <= coord.xMax and
						e[4] >= coord.yMin and e[4] <= coord.yMax then
					if coord.name == "re-indent" then
						err = main(path, false)
						break
					elseif coord.name == "exit" then
						err = "exit"
						break
					end
				end
			end
		elseif e[1] == "mouse_scroll" then
			tabWidth = (tabWidth + -e[2] < 1 or tabWidth + -e[2] > 99) and tabWidth or tabWidth + -e[2]
			drawColor(showString)
		elseif e[1] == "char" then
			path = path .. e[2]
			showString = path:sub((path:len() >= w - 26) and -(w - 27) or -(path:len()))
			drawColor(showString)
		elseif e[1] == "key" then
			if e[2] == 14 then
				path = path:sub(1, path:len() - 1)
				os.queueEvent("char", "")
			elseif e[2] == 28 then
				err = main(path, false)
			elseif e[2] == 200 then
				os.queueEvent("mouse_scroll", -1)
			elseif e[2] == 208 then
				os.queueEvent("mouse_scroll", 1)
			end
		end
	end

	term.setCursorBlink(false)
	if err == "true" then
		setBox(11, math.ceil(h / 2) - 1, w - 11, math.ceil(h / 2) + 1, colours.lightGrey,
			"successful")
		term.setTextColor(colors.black)
		term.setCursorPos(12, math.ceil(h / 2))
		term.write("> File Indented Successfully!")
		sleep(2)
	elseif err ~= "exit" then
		setBox(11, math.ceil(h / 2) - 1, w - 11, math.ceil(h / 2) + 1, colours.lightGrey,
			"failed")
		term.setTextColor(colors.black)
		term.setCursorPos(12, math.ceil(h / 2))
		term.write("> " .. err)
		sleep(2)
		return false
	end

	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	term.clear()
	term.setCursorPos(1, 1)
	centerPrint("Thanks for using Re-Indent!")
	centerPrint("By Engineer and GravityScore")
	return true
end

-- Run
if path then main(args[1], true)
else while gui() ~= true do end end
